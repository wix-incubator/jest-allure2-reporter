"use strict";(self.webpackChunk_wix_website_jest_allure2_reporter=self.webpackChunk_wix_website_jest_allure2_reporter||[]).push([[65],{876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),i=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=i(r),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3142:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(2784),a=r(6277);const s={tabItem:"tabItem_OMyP"};function o(e){let{children:t,hidden:r,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,o),hidden:r},t)}},2605:(e,t,r)=>{r.d(t,{Z:()=>w});var n=r(7896),a=r(2784),s=r(6277),o=r(5425),l=r(7267),u=r(4236),i=r(3432),c=r(9675);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}function d(e){const{values:t,children:r}=e;return(0,a.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:r}=e;const n=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,u._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function b(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,s=d(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[u,i]=f({queryString:r,groupId:n}),[p,b]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,c.Nk)(r);return[n,(0,a.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:n}),h=(()=>{const e=u??p;return m({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),i(e),b(e)}),[i,b,s]),tabValues:s}}var h=r(717);const k={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};function g(e){let{className:t,block:r,selectedValue:l,selectValue:u,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,r=c.indexOf(t),n=i[r].value;n!==l&&(p(t),u(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},t)},i.map((e=>{let{value:t,label:r,attributes:o}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,s.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":l===t})}),r??t)})))}function v(e){let{lazy:t,children:r,selectedValue:n}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=b(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",k.tabList)},a.createElement(g,(0,n.Z)({},e,t)),a.createElement(v,(0,n.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return a.createElement(y,(0,n.Z)({key:String(t)},e))}},8230:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=r(7896),a=(r(2784),r(876)),s=r(2605),o=r(3142);const l={sidebar_position:2,description:"Have an informative overview of your test results."},u="Statuses",i={unversionedId:"features/statuses",id:"features/statuses",title:"Statuses",description:"Have an informative overview of your test results.",source:"@site/../../docs/features/statuses.mdx",sourceDirName:"features",slug:"/features/statuses",permalink:"/jest-allure2-reporter/docs/features/statuses",draft:!1,editUrl:"https://github.com/wix-incubator/jest-allure2-reporter/tree/master/docs/../../docs/features/statuses.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Have an informative overview of your test results."},sidebar:"docsSidebar",previous:{title:"Grouping",permalink:"/jest-allure2-reporter/docs/features/grouping"},next:{title:"Errors",permalink:"/jest-allure2-reporter/docs/features/errors"}},c={},p=[{value:"Examples",id:"examples",level:2},{value:"Handling broken tests",id:"handling-broken-tests",level:2},{value:"Categorizing errors",id:"categorizing-errors",level:2}],d={toc:p},m="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"statuses"},"Statuses"),(0,a.kt)("p",null,"Jest Allure 2 Reporter provides a clear indication of your test cases' statuses, allowing you to immediately see if they have ",(0,a.kt)("em",{parentName:"p"},"passed"),", ",(0,a.kt)("em",{parentName:"p"},"failed"),", ",(0,a.kt)("em",{parentName:"p"},"broken"),", been ",(0,a.kt)("em",{parentName:"p"},"skipped"),", or are of ",(0,a.kt)("em",{parentName:"p"},"unknown")," status."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Below you can find examples of code that produces each of the statuses."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"\ud83d\udfe2 Passed",default:!0,mdxType:"TabItem"},(0,a.kt)("p",null,"Status ",(0,a.kt)("inlineCode",{parentName:"p"},"passed")," is reported when the test case has passed successfully:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"test('passed test', () => {\n  expect(2 + 2).toBe(4);\n});\n"))),(0,a.kt)(o.Z,{value:"\ud83d\udd34 Failed",mdxType:"TabItem"},(0,a.kt)("p",null,"Status ",(0,a.kt)("inlineCode",{parentName:"p"},"failed")," is reported when the test case has revealed a product defect, or it has invalid assertions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"test('failed test', () => {\n  expect(2 + 2).not.toBe(4);\n});\n"))),(0,a.kt)(o.Z,{value:"\ud83d\udfe1 Broken",mdxType:"TabItem"},(0,a.kt)("p",null,"Status ",(0,a.kt)("inlineCode",{parentName:"p"},"broken")," is reported when the test case has failed due to an error in the test code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"test('broken test', () => {\n  const user = null;\n  // TypeError: Cannot read property 'name' of null\n  expect(user.name).toBe('John');\n});\n"))),(0,a.kt)(o.Z,{value:"\u26aa Skipped",mdxType:"TabItem"},(0,a.kt)("p",null,"Status ",(0,a.kt)("inlineCode",{parentName:"p"},"skipped")," is reported when the test case has been skipped due to a ",(0,a.kt)("inlineCode",{parentName:"p"},"test.skip")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"test.todo")," call:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"test.skip('skipped test', () => {\n  expect(2 + 2).toBe(4);\n});\n\ntest.todo('todo test');\n"))),(0,a.kt)(o.Z,{value:"\ud83d\udfe3 Unknown",mdxType:"TabItem"},(0,a.kt)("p",null,"Status ",(0,a.kt)("inlineCode",{parentName:"p"},"unknown")," is reported when information about the test case result has been lost or not created:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"test('unknown test', () => {\n  process.exit(0); // the test information will be unrecoverable\n});\n")))),(0,a.kt)("h2",{id:"handling-broken-tests"},"Handling broken tests"),(0,a.kt)("p",null,"If you are using assertions (matchers, expectations) that throw errors directly\ninstead of using Jest's ",(0,a.kt)("inlineCode",{parentName:"p"},"expect")," API, and you want to treat these errors as broken tests,\nthere is a way to do it."),(0,a.kt)("p",null,"In your Jest config file, add an options object to the ",(0,a.kt)("inlineCode",{parentName:"p"},"jest-allure")," reporter config with\n",(0,a.kt)("inlineCode",{parentName:"p"},"errorsAsFailedAssertions")," set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"module.exports = {\n  // ...\n  reporters: [\n    // ...\n-   'jest-allure',\n+   ['jest-allure', {\n+     errorsAsFailedAssertions: true,\n+   }],\n  ],\n};\n")),(0,a.kt)("h2",{id:"categorizing-errors"},"Categorizing errors"),(0,a.kt)("p",null,"Allure 2 Framework provides a way to categorize errors by defining category names and regular expressions to match against error messages.\nRead more about it in the ",(0,a.kt)("a",{parentName:"p",href:"/jest-allure2-reporter/docs/features/grouping#defect-category"},"Defect category")," section."))}f.isMDXComponent=!0}}]);