"use strict";(self.webpackChunk_wix_website_jest_allure2_reporter=self.webpackChunk_wix_website_jest_allure2_reporter||[]).push([[4895],{5019:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=s(5893),a=s(1151);const r={},i="Test Step",o={id:"api/config/test-step",title:"Test Step",description:"In jest-allure2-reporter, the testStep configuration object allows you to customize how individual test steps are reported in Allure. This configuration provides fine-grained control over various aspects of test step reporting, including naming, status, attachments, and parameters.",source:"@site/../docs/api/config/04-test-step.mdx",sourceDirName:"api/config",slug:"/api/config/test-step",permalink:"/jest-allure2-reporter/api/config/test-step",draft:!1,unlisted:!1,editUrl:"https://github.com/wix-incubator/jest-allure2-reporter/tree/beta/docs/../docs/api/config/04-test-step.mdx",tags:[],version:"current",lastUpdatedBy:"Yaroslav Serhieiev",lastUpdatedAt:1725015775e3,sidebarPosition:4,frontMatter:{},sidebar:"apiSidebar",previous:{title:"Test Case",permalink:"/jest-allure2-reporter/api/config/test-case"},next:{title:"Test File",permalink:"/jest-allure2-reporter/api/config/test-file"}},l={},d=[{value:"Configuration Options",id:"configuration-options",level:2},{value:"<code>ignored</code>",id:"ignored",level:3},{value:"<code>displayName</code>",id:"displayname",level:3},{value:"<code>start</code>",id:"start",level:3},{value:"<code>stop</code>",id:"stop",level:3},{value:"<code>stage</code>",id:"stage",level:3},{value:"<code>status</code>",id:"status",level:3},{value:"<code>statusDetails</code>",id:"statusdetails",level:3},{value:"<code>attachments</code>",id:"attachments",level:3},{value:"<code>parameters</code>",id:"parameters",level:3},{value:"Usage Example",id:"usage-example",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components},{ArticleHeader:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ArticleHeader",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"test-step",children:"Test Step"})}),"\n",(0,n.jsxs)(t.p,{children:["In ",(0,n.jsx)(t.code,{children:"jest-allure2-reporter"}),", the ",(0,n.jsx)(t.code,{children:"testStep"})," configuration object allows you to customize how individual test steps are reported in Allure. This configuration provides fine-grained control over various aspects of test step reporting, including naming, status, attachments, and parameters."]}),"\n",(0,n.jsxs)(t.p,{children:["It's important to note that in Allure reporting, test steps include not only custom steps within your tests but also Jest's lifecycle hooks: ",(0,n.jsx)(t.code,{children:"beforeAll"}),", ",(0,n.jsx)(t.code,{children:"beforeEach"}),", ",(0,n.jsx)(t.code,{children:"afterEach"}),", and ",(0,n.jsx)(t.code,{children:"afterAll"}),". These hooks are treated as steps in the test execution and can be configured using the same options as other steps."]}),"\n",(0,n.jsx)(t.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,n.jsx)(s,{}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"testStep"})," configuration object supports the following properties:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"/** @type {import('jest-allure2-reporter').ReporterOptions} */\nconst jestAllure2ReporterOptions = {\n  testStep: {\n    ignored: /* ... */,\n    displayName: /* ... */,\n    start: /* ... */,\n    stop: /* ... */,\n    stage: /* ... */,\n    status: /* ... */,\n    statusDetails: /* ... */,\n    attachments: /* ... */,\n    parameters: /* ... */,\n  }\n};\n"})}),"\n",(0,n.jsxs)(t.p,{children:["These configuration options apply to all types of steps, including custom steps in your tests and Jest's lifecycle hooks (",(0,n.jsx)(t.code,{children:"beforeAll"}),", ",(0,n.jsx)(t.code,{children:"beforeEach"}),", ",(0,n.jsx)(t.code,{children:"afterEach"}),", and ",(0,n.jsx)(t.code,{children:"afterAll"}),")."]}),"\n",(0,n.jsx)(t.h3,{id:"ignored",children:(0,n.jsx)(t.code,{children:"ignored"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestStepExtractorContext, boolean>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"false"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Determines whether a test step should be omitted from the report. This can be useful for filtering out certain hooks or custom steps that you don't want to appear in the report."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"ignored: ({ testStepMetadata }) =>\n  testStepMetadata.hookType === 'beforeAll' ||\n  testStepMetadata.displayName?.includes('(internal)')\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This example ignores ",(0,n.jsx)(t.code,{children:"beforeAll"}),' hooks and steps that have "(internal)" in their display name.']}),"\n",(0,n.jsx)(t.h3,{id:"displayname",children:(0,n.jsx)(t.code,{children:"displayName"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestStepExtractorContext, string>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"({ testStepMetadata }) => testStepMetadata.displayName || 'Unnamed step'"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the display name of the test step in the report."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"displayName: ({ testStepMetadata }) => {\n  if (testStepMetadata.hookType) {\n    return `${testStepMetadata.hookType} hook: ${testStepMetadata.displayName}`;\n  }\n  return testStepMetadata.displayName || 'Custom step';\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example prefixes hook steps with their type and provides a default name for custom steps."}),"\n",(0,n.jsx)(t.h3,{id:"start",children:(0,n.jsx)(t.code,{children:"start"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestStepExtractorContext, number>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the start timestamp of the test step."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"start: ({ value }) => value - 100 // Subtract 100ms from the actual start time\n"})}),"\n",(0,n.jsx)(t.h3,{id:"stop",children:(0,n.jsx)(t.code,{children:"stop"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestStepExtractorContext, number>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the stop timestamp of the test step."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"stop: ({ value }) => value + 100 // Add 100ms to the actual stop time\n"})}),"\n",(0,n.jsx)(t.h3,{id:"stage",children:(0,n.jsx)(t.code,{children:"stage"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestStepExtractorContext, Stage>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set based on step execution"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the stage of the test step. Possible values are 'scheduled', 'running', 'finished', 'pending', or 'interrupted'."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"stage: ({ value, testStepMetadata }) => {\n  if (testStepMetadata.hookType === 'beforeAll' && value === 'running') {\n    return 'scheduled';\n  }\n  return value;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example changes the stage of running 'beforeAll' hooks to 'scheduled'."}),"\n",(0,n.jsx)(t.h3,{id:"status",children:(0,n.jsx)(t.code,{children:"status"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestStepExtractorContext, Status>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set based on step result"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the status of the test step. Possible values are 'failed', 'broken', 'passed', 'skipped', or 'unknown'."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"status: ({ value, testStepMetadata }) => {\n  if (value === 'failed' && testStepMetadata.hookType) {\n    return 'broken';\n  }\n  return value;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example changes the status of failed hooks to 'broken'."}),"\n",(0,n.jsx)(t.h3,{id:"statusdetails",children:(0,n.jsx)(t.code,{children:"statusDetails"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestStepExtractorContext, MaybeNullish<StatusDetails>>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set based on step result"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Provides additional details about the test step status."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"statusDetails: ({ value, testStepMetadata }) => {\n  if (value && testStepMetadata.hookType) {\n    return {\n      ...value,\n      message: `Hook failure: ${value.message}`,\n    };\n  }\n  return value;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:'This example prefixes the status message for hooks with "Hook failure:".'}),"\n",(0,n.jsx)(t.h3,{id:"attachments",children:(0,n.jsx)(t.code,{children:"attachments"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"AttachmentsCustomizer<TestStepExtractorContext>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"undefined"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the attachments for the test step."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"attachments: ({ value, testStepMetadata }) => {\n  if (testStepMetadata.hookType === 'afterEach') {\n    return [\n      ...value,\n      {\n        name: 'Step Summary',\n        content: JSON.stringify(testStepMetadata, null, 2),\n        type: 'application/json'\n      }\n    ];\n  }\n  return value;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example adds a JSON attachment with step metadata for 'afterEach' hooks."}),"\n",(0,n.jsx)(t.h3,{id:"parameters",children:(0,n.jsx)(t.code,{children:"parameters"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"ParametersCustomizer<TestStepExtractorContext>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"undefined"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the parameters for the test step."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"parameters: {\n  stepType: ({ testStepMetadata }) => testStepMetadata.hookType || 'custom',\n  duration: ({ testStepMetadata }) => ({\n    name: 'Duration',\n    value: testStepMetadata.stop - testStepMetadata.start,\n    excluded: false,\n  }),\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example adds a 'stepType' parameter and calculates the duration of the step."}),"\n",(0,n.jsx)(t.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,n.jsx)(t.p,{children:"Here's a comprehensive example of how to use the test step configuration:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import type { ReporterOptions } from 'jest-allure2-reporter';\n\nconst testStepConfig: ReporterOptions['testStep'] = {\n  ignored: ({ testStepMetadata }) => testStepMetadata.displayName?.includes('(internal)'),\n  displayName: ({ testStepMetadata }) => {\n    if (testStepMetadata.hookType) {\n      return `${testStepMetadata.hookType} hook: ${testStepMetadata.displayName}`;\n    }\n    return testStepMetadata.displayName || 'Custom step';\n  },\n  status: ({ value, testStepMetadata }) => {\n    if (value === 'failed' && testStepMetadata.hookType) {\n      return 'broken';\n    }\n    return value;\n  },\n  statusDetails: ({ value, testStepMetadata }) => {\n    if (value && testStepMetadata.hookType) {\n      return {\n        ...value,\n        message: `Hook failure: ${value.message}`,\n      };\n    }\n    return value;\n  },\n  attachments: ({ value, testStepMetadata }) => {\n    if (testStepMetadata.hookType === 'afterEach') {\n      return [\n        ...value,\n        {\n          name: 'Step Summary',\n          content: JSON.stringify(testStepMetadata, null, 2),\n          type: 'application/json'\n        }\n      ];\n    }\n    return value;\n  },\n  parameters: {\n    stepType: ({ testStepMetadata }) => testStepMetadata.hookType || 'custom',\n    duration: ({ testStepMetadata }) => ({\n      name: 'Duration',\n      value: testStepMetadata.stop - testStepMetadata.start,\n      excluded: false,\n    }),\n  }\n};\n\nmodule.exports = {\n  // ... other Jest configurations\n  reporters: [\n    'default',\n    ['jest-allure2-reporter', { testStep: testStepConfig }]\n  ],\n};\n"})}),"\n",(0,n.jsx)(t.p,{children:"This configuration provides a rich set of customizations for test step reporting, allowing you to tailor the Allure report to your specific needs. It demonstrates how to handle different types of steps, add custom attachments and parameters, and modify the status and display of steps based on their context."})]})}function c(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>o,a:()=>i});var n=s(7294);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);