"use strict";(self.webpackChunk_wix_website_jest_allure2_reporter=self.webpackChunk_wix_website_jest_allure2_reporter||[]).push([[881],{876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(2784);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(r),m=n,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return r?a.createElement(h,i(i({ref:t},c),{},{components:r})):a.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:n,i[1]=o;for(var u=2;u<l;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3142:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(2784),n=r(6277);const l={tabItem:"tabItem_OMyP"};function i(e){let{children:t,hidden:r,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(l.tabItem,i),hidden:r},t)}},2605:(e,t,r)=>{r.d(t,{Z:()=>T});var a=r(7896),n=r(2784),l=r(6277),i=r(5425),o=r(7267),s=r(4236),u=r(3432),c=r(9675);function p(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:a,default:n}}=e;return{value:t,label:r,attributes:a,default:n}}))}function d(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:r}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,s._X)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function b(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,l=d(e),[i,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,u]=h({queryString:r,groupId:a}),[p,b]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,c.Nk)(r);return[a,(0,n.useCallback)((e=>{r&&l.set(e)}),[r,l])]}({groupId:a}),f=(()=>{const e=s??p;return m({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),b(e)}),[u,b,l]),tabValues:l}}var f=r(717);const y={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};function v(e){let{className:t,block:r,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,r=c.indexOf(t),a=u[r].value;a!==o&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:i}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},i,{className:(0,l.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":o===t})}),r??t)})))}function k(e){let{lazy:t,children:r,selectedValue:a}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=b(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",y.tabList)},n.createElement(v,(0,a.Z)({},e,t)),n.createElement(k,(0,a.Z)({},e,t)))}function T(e){const t=(0,f.Z)();return n.createElement(g,(0,a.Z)({key:String(t)},e))}},8737:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=r(7896),n=(r(2784),r(876)),l=r(2605),i=r(3142);const o={sidebar_position:6,description:"Prioritize your test cases and their impact on the product."},s="Severity",u={unversionedId:"api/severity",id:"api/severity",title:"Severity",description:"Prioritize your test cases and their impact on the product.",source:"@site/../../docs/api/severity.mdx",sourceDirName:"api",slug:"/api/severity",permalink:"/jest-allure2-reporter/docs/api/severity",draft:!1,editUrl:"https://github.com/wix-incubator/jest-allure2-reporter/tree/master/docs/../../docs/api/severity.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"Prioritize your test cases and their impact on the product."},sidebar:"docsSidebar",previous:{title:"People",permalink:"/jest-allure2-reporter/docs/api/people"},next:{title:"Links",permalink:"/jest-allure2-reporter/docs/api/links"}},c={},p=[{value:"Test file",id:"test-file",level:2},{value:"Test suite",id:"test-suite",level:2},{value:"Test case",id:"test-case",level:2},{value:"About severity levels",id:"about-severity-levels",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"severity"},"Severity"),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"This website version refers to the unreleased version of ",(0,n.kt)("inlineCode",{parentName:"p"},"jest-allure2-reporter")," and is not yet available\nanywhere. Please use GitHub docs for the latest stable version.")),(0,n.kt)("p",null,"In Allure reports, you can determine the ",(0,n.kt)("strong",{parentName:"p"},"severity")," of each test case.\nThis helps you to prioritize the test cases and to determine the impact of a failed test case.\nThe severity can be one of the following values: ",(0,n.kt)("em",{parentName:"p"},"blocker"),", ",(0,n.kt)("em",{parentName:"p"},"critical"),", ",(0,n.kt)("em",{parentName:"p"},"normal"),", ",(0,n.kt)("em",{parentName:"p"},"minor"),", ",(0,n.kt)("em",{parentName:"p"},"trivial"),".\nThe default severity is ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"normal")),"."),(0,n.kt)("p",null,"There are two ways to define the severity of a test case:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"declaratively, via ",(0,n.kt)("inlineCode",{parentName:"li"},"@severity")," JSDoc annotation;"),(0,n.kt)("li",{parentName:"ul"},"programmatically, via ",(0,n.kt)("inlineCode",{parentName:"li"},"$Severity")," annotation function.")),(0,n.kt)("p",null,"The ",(0,n.kt)("strong",{parentName:"p"},"severity")," can be defined in the following places:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"on a ",(0,n.kt)("em",{parentName:"li"},"test file")," level;"),(0,n.kt)("li",{parentName:"ul"},"on a ",(0,n.kt)("em",{parentName:"li"},"test suite")," level;"),(0,n.kt)("li",{parentName:"ul"},"on a ",(0,n.kt)("em",{parentName:"li"},"test case")," level.")),(0,n.kt)("h2",{id:"test-file"},"Test file"),(0,n.kt)("p",null,"In a test file, you can define the severity for all test cases in the file.\nThis is especially useful for test files that contain multiple top-level ",(0,n.kt)("inlineCode",{parentName:"p"},"describe")," blocks."),(0,n.kt)(l.Z,{groupId:"approach",mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"jsdoc",label:"JSDoc",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @severity critical\n */\n\ndescribe('Sanity: Login flow', () => {\n  it('should login with valid credentials', () => {\n    /* ... test code ... */\n  });\n});\n\ndescribe('Sanity: Dashboard', () => {\n  it('should show the dashboard', () => {\n    /* ... test code ... */\n  });\n});\n"))),(0,n.kt)(i.Z,{value:"dsl",label:"Function",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import { allure } from 'jest-allure2-reporter';\n\nallure.severity('critical');\n\ndescribe('Sanity: Login flow', () => {\n  it('should login with valid credentials', () => {\n    /* ... test code ... */\n  });\n});\n\ndescribe('Sanity: Dashboard', () => {\n  it('should show the dashboard', () => {\n    /* ... test code ... */\n  });\n});\n"))),(0,n.kt)(i.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"TODO: add screenshot\n")))),(0,n.kt)("h2",{id:"test-suite"},"Test suite"),(0,n.kt)("p",null,"You can define the severity for each test suite individually."),(0,n.kt)(l.Z,{groupId:"approach",mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"jsdoc",label:"JSDoc",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"describe('Sanity: Login flow', () => {\n  /**\n   * @severity critical\n   */\n\n  it('should login with valid credentials', () => {\n    /* ... test code ... */\n  });\n});\n\ndescribe('Dashboard', () => {\n  /**\n   * @severity minor\n   */\n\n  it('should show the dashboard', () => {\n    /* ... test code ... */\n  });\n});\n")),(0,n.kt)("p",null,"Please note that you have to put the JSDoc comment inside the test suite function body.")),(0,n.kt)(i.Z,{value:"dsl",label:"Function",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import { $Severity } from 'jest-allure2-reporter/annotations';\n\n$Severity('blocker')\ndescribe('Sanity: Login flow', () => {\n  it('should login with valid credentials', () => {\n    /* ... test code ... */\n  });\n});\n\n$Severity('minor')\ndescribe('Sanity: Dashboard', () => {\n    it('should show the dashboard', () => {\n    /* ... test code ... */\n  });\n});\n"))),(0,n.kt)(i.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"TODO: add screenshot\n")))),(0,n.kt)("h2",{id:"test-case"},"Test case"),(0,n.kt)("p",null,"You can define the severity for each test case individually."),(0,n.kt)(l.Z,{groupId:"approach",mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"jsdoc",label:"JSDoc",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"it('should login with valid credentials', () => {\n  /**\n   * @severity critical\n   */\n\n  /* ... test code ... */\n});\n")),(0,n.kt)("p",null,"Please note that you have to put the JSDoc comment inside the test function body.")),(0,n.kt)(i.Z,{value:"dsl",label:"Function",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"$Severity('critical')\nit('should login with valid credentials', () => {\n  /* ... */\n});\n"))),(0,n.kt)(i.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"TODO: add screenshot\n")))),(0,n.kt)("h2",{id:"about-severity-levels"},"About severity levels"),(0,n.kt)("p",null,"Keep in mind that the meaning of each severity level is subjective and varies from project to project.\nIt is merely a convention that you can use to communicate the importance of a test case or an issue."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Blocker"),": This is the highest severity level. A blocker issue or a test case failure is something that completely prevents further testing or use of the product or system. It must be addressed immediately."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Critical"),": A critical issue is a major problem that significantly impacts the functionality of the product or system, but does not entirely prevent its use or testing. It should be addressed as soon as possible after any blocker issues."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Normal"),": A normal severity issue is a moderate problem. It impacts the product or system in a noticeable way, but it's not as crucial as blocker or critical issues. It should be addressed in the course of normal workflow."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Minor"),": A minor issue has a small impact on the product or system. It might cause some inconvenience or confusion, but it doesn't significantly affect the overall functionality. These are usually lower priority issues."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Trivial"),": A trivial issue is a very minor problem, often related to aesthetics, user experience, deprecated features, or aspects of the product still in alpha or beta stages rather than core functionality. Trivial issues are the lowest priority and are typically addressed last, if at all.")))}h.isMDXComponent=!0}}]);