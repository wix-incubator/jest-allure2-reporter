"use strict";(self.webpackChunk_wix_website_jest_allure2_reporter=self.webpackChunk_wix_website_jest_allure2_reporter||[]).push([[464],{9234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=n(5893),i=n(1151);const r={sidebar_position:3},a="Annotations",o={id:"api/annotations",title:"Annotations",description:"Annotations are functions that can be called before test suites or tests to add metadata to them. They share the same purpose as docblocks, but they execute at runtime, allowing you to add metadata dynamically. Annotations can also be used to bypass the limitation of docblocks not being applicable to describe statements.",source:"@site/../docs/api/02-annotations.mdx",sourceDirName:"api",slug:"/api/annotations",permalink:"/jest-allure2-reporter/api/annotations",draft:!1,unlisted:!1,editUrl:"https://github.com/wix-incubator/jest-allure2-reporter/tree/beta/docs/../docs/api/02-annotations.mdx",tags:[],version:"current",lastUpdatedBy:"Yaroslav Serhieiev",lastUpdatedAt:1725271315e3,sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"apiSidebar",previous:{title:"Docblocks",permalink:"/jest-allure2-reporter/api/docblocks"},next:{title:"Decorators",permalink:"/jest-allure2-reporter/api/decorators"}},c={},d=[{value:"<code>$Description</code>",id:"description",level:2},{value:"<code>$DescriptionHtml</code>",id:"descriptionhtml",level:2},{value:"<code>$DisplayName</code>",id:"displayname",level:2},{value:"<code>$FullName</code>",id:"fullname",level:2},{value:"<code>$HistoryId</code>",id:"historyid",level:2},{value:"<code>$Issue</code>",id:"issue",level:2},{value:"<code>$Label</code>",id:"label",level:2},{value:"<code>$Link</code>",id:"link",level:2},{value:"<code>$Owner</code>",id:"owner",level:2},{value:"<code>$Package</code>, <code>$TestClass</code> <code>$TestMethod</code>",id:"package-testclass-testmethod",level:2},{value:"<code>$Parameter</code>",id:"parameter",level:2},{value:"<code>$Severity</code>",id:"severity",level:2},{value:"<code>$Tag</code>",id:"tag",level:2},{value:"<code>$Thread</code>",id:"thread",level:2},{value:"<code>$TmsLink</code>",id:"tmslink",level:2},{value:"<code>$Epic</code>, <code>$Feature</code>, <code>$Story</code>",id:"epic-feature-story",level:2},{value:"<code>$ParentSuite</code>, <code>$Suite</code>, <code>$SubSuite</code>",id:"parentsuite-suite-subsuite",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.a)(),...e.components},{ArticleHeader:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ArticleHeader",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"annotations",children:"Annotations"})}),"\n",(0,s.jsxs)(t.p,{children:["Annotations are functions that can be called before test suites or tests to add metadata to them. They share the same purpose as ",(0,s.jsx)(t.a,{href:"/jest-allure2-reporter/api/docblocks",children:"docblocks"}),", but they execute at runtime, allowing you to add metadata dynamically. Annotations can also be used to bypass the limitation of docblocks not being applicable to ",(0,s.jsx)(t.code,{children:"describe"})," statements."]}),"\n",(0,s.jsx)(t.p,{children:"To use annotations, you'll need to import them first, e.g.:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"import { $Description, $Link, $Owner } from 'jest-allure2-reporter/api';\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Alternatively, you can ",(0,s.jsxs)(t.a,{href:"/jest-allure2-reporter/api#global-typings",children:["configure ",(0,s.jsx)(t.code,{children:"jest-allure2-reporter/globals"})]})," to make them available globally."]}),"\n",(0,s.jsx)(t.h2,{id:"description",children:(0,s.jsx)(t.code,{children:"$Description"})}),"\n",(0,s.jsx)(n,{}),"\n",(0,s.jsx)(t.p,{children:"Adds a Markdown description to a test or suite."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Description('### Suite-level description')\ndescribe('Test suite', () => {\n  $Description('Demonstrates a **passing** test case')\n  test('First test', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $Description('Demonstrates a **failing** test case')\n  test('Second test', () => {\n    expect(2 + 2).toBe(3);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"descriptionhtml",children:(0,s.jsx)(t.code,{children:"$DescriptionHtml"})}),"\n",(0,s.jsx)(t.p,{children:"Adds an HTML description to a test or suite."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$DescriptionHtml('<h3>Suite-level description</h3>')\ndescribe('Test suite', () => {\n  $DescriptionHtml('Demonstrates a <b>passing</b> test case')\n  test('First test', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $DescriptionHtml('Demonstrates a <b>failing</b> test case')\n  test('Second test', () => {\n    expect(2 + 2).toBe(3);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"displayname",children:(0,s.jsx)(t.code,{children:"$DisplayName"})}),"\n",(0,s.jsxs)(t.p,{children:["Overrides test names specified in ",(0,s.jsx)(t.code,{children:"test('...')"})," or ",(0,s.jsx)(t.code,{children:"it('...')"})," in the test report. It can also be used to set custom names for hooks."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"describe('Test suite', () => {\n  $DisplayName('Custom \"beforeEach\" hook')\n  beforeEach(() => {\n    // Hooks can be renamed too\n  });\n\n  $DisplayName('1 + 1 = 2')\n  test('First test', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $DisplayName('2 + 2 = 3')\n  test('Second test', () => {\n    expect(2 + 2).toBe(3);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"fullname",children:(0,s.jsx)(t.code,{children:"$FullName"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the full name of a test, which can be used for more detailed identification or grouping.\nBy default, full names are also used for tracking test history across multiple runs or retries."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"describe('Test suite', () => {\n  $FullName('Arithmetic > Addition > Valid assertion')\n  test('First test', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $FullName('Arithmetic > Addition > Invalid assertion')\n  test('Second test', () => {\n    expect(2 + 2).toBe(3);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"historyid",children:(0,s.jsx)(t.code,{children:"$HistoryId"})}),"\n",(0,s.jsx)(t.p,{children:"Assigns a unique identifier to a test, which can be used to track test history across multiple runs or retries."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"describe('Test suite', () => {\n  $HistoryId('HISTORY-1')\n  test('First test', () => {\n    expect(2 + 2).toBe(3);\n  });\n\n  $HistoryId('HISTORY-1')\n  test('Considered as repetition of the first test', () => {\n    // Open \"Retries\" tab in the report to see the history of this test\n    expect(1 + 1).toBe(2);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"issue",children:(0,s.jsx)(t.code,{children:"$Issue"})}),"\n",(0,s.jsx)(t.p,{children:"Links a test to an issue in your issue tracking system."}),"\n",(0,s.jsxs)(t.p,{children:["URLs are built using ",(0,s.jsx)(t.a,{href:"#TODO",children:"the template strings"})," configured in the reporter options."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"describe('Regression tests', () => {\n  $Issue('XMLRPC-15')\n  test('Proving the fix', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $Issue('XMLRPC-16')\n  test.failing('Demonstrating an existing bug', () => {\n    expect(2 + 2).toBe(3);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"label",children:(0,s.jsx)(t.code,{children:"$Label"})}),"\n",(0,s.jsx)(t.p,{children:"Adds a custom label to a test or suite."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Label('testType', 'screenshotDiff');\ndescribe('Screenshot tests', () => {\n  test('What the client explained', () => {\n    allure.fileAttachment('fixtures/screenshots/expected.png', 'expected');\n    allure.fileAttachment('fixtures/screenshots/actual.png', 'actual');\n    allure.fileAttachment('fixtures/screenshots/diff.png', 'diff');\n\n    // and what the programmer coded \xaf\\_(\u30c4)_/\xaf\n    expect('programmer').toHaveProperty('telepathy');\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"link",children:(0,s.jsx)(t.code,{children:"$Link"})}),"\n",(0,s.jsx)(t.p,{children:"Adds a link to external resources related to the test."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Link('https://en.wikipedia.org/wiki/Arithmetic', '\ud83d\udd22 Arithmetic')\ndescribe('Arithmetics', () => {\n  $Link('https://en.wikipedia.org/wiki/Addition', '\u2795 Addition')\n  test('1 + 1 = 2', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $Link('https://en.wikipedia.org/wiki/Division_(mathematics)', '\u2797 Division')\n  test('3 / 2 = 1.5', () => {\n    expect(3 / 2).toBe(1.5);\n  });\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"$Link"})," annotation also accepts a ",(0,s.jsx)(t.code,{children:"Link"})," object as an argument:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Link({ name: '\ud83d\udd22 Arithmetic', type: 'wiki', url: 'https://en.wikipedia.org/wiki/Arithmetic' });\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Advanced users may pass empty strings to ",(0,s.jsx)(t.code,{children:"url"})," if they want to ",(0,s.jsx)(t.a,{href:"#TODO",children:"build the URL dynamically"})," via a config function:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Link({ name: 'Arithmetic', type: 'wiki', url: '' });\n"})}),"\n",(0,s.jsx)(t.h2,{id:"owner",children:(0,s.jsx)(t.code,{children:"$Owner"})}),"\n",(0,s.jsx)(t.p,{children:"Specifies the owner of a test or suite."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Owner('John Doe');\ndescribe('Suite maintained by John', () => {\n  test('First test', () => {\n    // John maintains this test\n  });\n\n  test('Second test', () => {\n    // John maintains this test too\n  });\n\n  $Owner('Jane Doe')\n  test('Third test', () => {\n    // Unlike the other tests, Jane maintains this one\n  });\n});\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"package-testclass-testmethod",children:[(0,s.jsx)(t.code,{children:"$Package"}),", ",(0,s.jsx)(t.code,{children:"$TestClass"})," ",(0,s.jsx)(t.code,{children:"$TestMethod"})]}),"\n",(0,s.jsx)(t.p,{children:"Specifies the package or module that a test belongs to."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Package('e2e.annotations')\n$TestClass('e2e.annotations.MyService')\ndescribe('My service', () => {\n\n  $TestMethod('Alternative title for the test')\n  test('should log a message', () => {\n    // Open \"Packages\" view to see this test grouped under \"e2e.annotations\"\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"parameter",children:(0,s.jsx)(t.code,{children:"$Parameter"})}),"\n",(0,s.jsx)(t.p,{children:"Adds a parameter to a test or suite."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"describe('Login screen', () => {\n  $Parameter('auth.NewLoginScreen', 'on')\n  test('should display the new login screen', () => {\n    // Visit the login page\n    // Assert the new login screen is displayed\n  });\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"$Parameter"})," annotation accepts any values and supports optional attributes:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Parameter('Some index', 2);\n$Parameter('secret', 'P/55VV0RD', { mode: 'masked' });\n$Parameter({\n  name: 'Debug Info',\n  value: {boring: \"debug\", info: \"here\"},\n  excluded: !process.env.DEBUG,\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"severity",children:(0,s.jsx)(t.code,{children:"$Severity"})}),"\n",(0,s.jsxs)(t.p,{children:["Sets the ",(0,s.jsx)(t.a,{href:"#TODO",children:"severity level"})," of a test or suite."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Severity('critical');\ndescribe('Test suite', () => {\n  test('Important test 1', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  test('Important test 2', () => {\n    expect(2 + 2).toBe(4);\n  });\n\n  $Severity('trivial');\n  test('Unimportant test', () => {\n    expect(true).toBe(true);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"tag",children:(0,s.jsx)(t.code,{children:"$Tag"})}),"\n",(0,s.jsxs)(t.p,{children:["Adds one or more ",(0,s.jsx)(t.a,{href:"#TODO",children:"tags"})," to a test or suite."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Tag('dsl', 'arithmetic');\ndescribe('Test suite', () => {\n  $Tag('addition')\n  test('First test', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $Tag('division')\n  test('Second test', () => {\n    expect(3 / 2).toBe(1.5);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"thread",children:(0,s.jsx)(t.code,{children:"$Thread"})}),"\n",(0,s.jsxs)(t.p,{children:["Specifies a custom thread for concurrent tests.\nDo not use it unless you want to control tests on the ",(0,s.jsx)(t.a,{href:"#TODO",children:"Timeline"})," manually."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"describe('Test suite', () => {\n  $Thread('T1')\n  test.concurrent('First test', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $Thread('T2')\n  test.concurrent('Second test', () => {\n    expect(3 / 2).toBe(1.5);\n  });\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"tmslink",children:(0,s.jsx)(t.code,{children:"$TmsLink"})}),"\n",(0,s.jsx)(t.p,{children:"Links a test to a Test Management System (TMS) entry."}),"\n",(0,s.jsxs)(t.p,{children:["URLs are built using ",(0,s.jsx)(t.a,{href:"#TODO",children:"the template strings"})," configured in the reporter options."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$TmsLink('TMS-1234')\ntest('should be linked to a TMS ticket', () => {\n  expect(1 + 1).toBe(2);\n});\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"epic-feature-story",children:[(0,s.jsx)(t.code,{children:"$Epic"}),", ",(0,s.jsx)(t.code,{children:"$Feature"}),", ",(0,s.jsx)(t.code,{children:"$Story"})]}),"\n",(0,s.jsx)(t.p,{children:"There are also annotations for Behavior-Driven Development (BDD) style testing:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$Epic('Arithmetic operations')\n$Feature('Addition')\ndescribe('Test suite', () => {\n  $Story('Sane assumptions')\n  test('First test', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  $Story('Insane assumptions')\n  test('Second test', () => {\n    expect(2 + 2).toBe(3);\n  });\n});\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"parentsuite-suite-subsuite",children:[(0,s.jsx)(t.code,{children:"$ParentSuite"}),", ",(0,s.jsx)(t.code,{children:"$Suite"}),", ",(0,s.jsx)(t.code,{children:"$SubSuite"})]}),"\n",(0,s.jsx)(t.p,{children:"Annotations for organizing test suites in a hierarchical structure:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"$ParentSuite('Custom Parent Suite')\n$Suite('Custom Suite')\n$SubSuite('Custom Sub-Suite')\ntest('Test outside of any suite', () => {\n  // This test will be placed under:\n  // Custom Parent Suite > Custom Suite > Custom Sub-Suite\n});\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var s=n(7294);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);