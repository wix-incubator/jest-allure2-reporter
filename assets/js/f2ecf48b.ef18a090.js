"use strict";(self.webpackChunk_wix_website_jest_allure2_reporter=self.webpackChunk_wix_website_jest_allure2_reporter||[]).push([[1094],{1680:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=a(5893),l=a(1151);const r={sidebar_position:5},s="Runtime API",i={id:"api/runtime-api",title:"Runtime API",description:"Runtime API provides methods to dynamically add information to your test reports during test execution. This API is accessible through the allure object, which is globally available when using the jest-allure2-reporter.",source:"@site/../docs/api/04-runtime-api.mdx",sourceDirName:"api",slug:"/api/runtime-api",permalink:"/jest-allure2-reporter/api/runtime-api",draft:!1,unlisted:!1,editUrl:"https://github.com/wix-incubator/jest-allure2-reporter/tree/beta/docs/../docs/api/04-runtime-api.mdx",tags:[],version:"current",lastUpdatedBy:"Yaroslav Serhieiev",lastUpdatedAt:1725015775e3,sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"apiSidebar",previous:{title:"Decorators",permalink:"/jest-allure2-reporter/api/decorators"},next:{title:"Configuration",permalink:"/jest-allure2-reporter/api/config/"}},c={},d=[{value:"Metadata Methods",id:"metadata-methods",level:2},{value:"<code>allure.description(string)</code>",id:"alluredescriptionstring",level:3},{value:"<code>allure.descriptionHtml(string)</code>",id:"alluredescriptionhtmlstring",level:3},{value:"<code>allure.epic(string)</code>",id:"allureepicstring",level:3},{value:"<code>allure.feature(string)</code>",id:"allurefeaturestring",level:3},{value:"<code>allure.story(string)</code>",id:"allurestorystring",level:3},{value:"<code>allure.suite(string)</code>",id:"alluresuitestring",level:3},{value:"<code>allure.label(name, string)</code>",id:"allurelabelname-string",level:3},{value:"<code>allure.parameter(name, value)</code>",id:"allureparametername-value",level:3},{value:"Link Methods",id:"link-methods",level:2},{value:"<code>allure.link(url[, name])</code>",id:"allurelinkurl-name",level:3},{value:"<code>allure.issue(name[, url])</code>",id:"allureissuename-url",level:3},{value:"<code>allure.tms(name[, url])</code>",id:"alluretmsname-url",level:3},{value:"Status Methods",id:"status-methods",level:2},{value:"<code>allure.status(status)</code>",id:"allurestatusstatus",level:3},{value:"<code>allure.statusDetails({ message, trace })</code>",id:"allurestatusdetails-message-trace-",level:3},{value:"Attachments",id:"attachments",level:2},{value:"<code>allure.attachment(string, content[, type])</code>",id:"allureattachmentstring-content-type",level:3},{value:"<code>allure.createAttachment(name: string, content: () =&gt; string | Buffer, type?: string)</code>",id:"allurecreateattachmentname-string-content---string--buffer-type-string",level:3},{value:"Steps",id:"steps",level:2},{value:"<code>allure.step(name, fn)</code>",id:"allurestepname-fn",level:3},{value:"<code>allure.createStep(name, fn)</code>",id:"allurecreatestepname-fn",level:3},{value:"Advanced Methods",id:"advanced-methods",level:2},{value:"<code>allure.$bind(options)</code>",id:"allurebindoptions",level:3},{value:"<code>allure.$plug(callback)</code>",id:"allureplugcallback",level:3}];function o(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.a)(),...e.components},{ArticleHeader:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ArticleHeader",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"runtime-api",children:"Runtime API"})}),"\n",(0,n.jsxs)(t.p,{children:["Runtime API provides methods to dynamically add information to your test reports during test execution. This API is accessible through the ",(0,n.jsx)(t.code,{children:"allure"})," object, which is globally available when using the ",(0,n.jsx)(t.code,{children:"jest-allure2-reporter"}),"."]}),"\n",(0,n.jsx)(t.admonition,{title:"Note",type:"info",children:(0,n.jsx)(t.p,{children:"Using Runtime API outside of test code is possible, but not recommended for casual users,\nas it has caveats and undocumented behavior."})}),"\n",(0,n.jsx)(t.h2,{id:"metadata-methods",children:"Metadata Methods"}),"\n",(0,n.jsx)(a,{}),"\n",(0,n.jsx)(t.h3,{id:"alluredescriptionstring",children:(0,n.jsx)(t.code,{children:"allure.description(string)"})}),"\n",(0,n.jsx)(t.p,{children:"Sets a Markdown description for the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.description('This test verifies the login functionality.');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"alluredescriptionhtmlstring",children:(0,n.jsx)(t.code,{children:"allure.descriptionHtml(string)"})}),"\n",(0,n.jsx)(t.p,{children:"Sets an HTML description for the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.descriptionHtml('<h1>Login Test</h1>' +\n  '<p>This test verifies the login functionality.</p>');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allureepicstring",children:(0,n.jsx)(t.code,{children:"allure.epic(string)"})}),"\n",(0,n.jsx)(t.p,{children:"Sets the epic for the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.epic('User Authentication');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allurefeaturestring",children:(0,n.jsx)(t.code,{children:"allure.feature(string)"})}),"\n",(0,n.jsx)(t.p,{children:"Sets the feature for the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.feature('Login');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allurestorystring",children:(0,n.jsx)(t.code,{children:"allure.story(string)"})}),"\n",(0,n.jsx)(t.p,{children:"Sets the user story for the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.story('User can log in with valid credentials');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"alluresuitestring",children:(0,n.jsx)(t.code,{children:"allure.suite(string)"})}),"\n",(0,n.jsx)(t.p,{children:"Sets the suite name for the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.suite('Authentication Tests');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allurelabelname-string",children:(0,n.jsx)(t.code,{children:"allure.label(name, string)"})}),"\n",(0,n.jsx)(t.p,{children:"Adds a custom label to the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.label('custom', 'value');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allureparametername-value",children:(0,n.jsx)(t.code,{children:"allure.parameter(name, value)"})}),"\n",(0,n.jsx)(t.p,{children:"Adds a parameter to the current test case or step."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.parameter('username', 'testuser');\n"})}),"\n",(0,n.jsx)(t.h2,{id:"link-methods",children:"Link Methods"}),"\n",(0,n.jsx)(t.h3,{id:"allurelinkurl-name",children:(0,n.jsx)(t.code,{children:"allure.link(url[, name])"})}),"\n",(0,n.jsx)(t.p,{children:"Adds a link to the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.link('https://example.com', 'Example Link');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allureissuename-url",children:(0,n.jsx)(t.code,{children:"allure.issue(name[, url])"})}),"\n",(0,n.jsx)(t.p,{children:"Adds an issue link to the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.issue('JIRA-123');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"alluretmsname-url",children:(0,n.jsx)(t.code,{children:"allure.tms(name[, url])"})}),"\n",(0,n.jsx)(t.p,{children:"Adds a Test Management System (TMS) link to the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.tms('TMS-456');\n"})}),"\n",(0,n.jsx)(t.h2,{id:"status-methods",children:"Status Methods"}),"\n",(0,n.jsx)(t.h3,{id:"allurestatusstatus",children:(0,n.jsx)(t.code,{children:"allure.status(status)"})}),"\n",(0,n.jsx)(t.p,{children:"Sets the status for the current test case or step."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.status('failed');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allurestatusdetails-message-trace-",children:(0,n.jsx)(t.code,{children:"allure.statusDetails({ message, trace })"})}),"\n",(0,n.jsx)(t.p,{children:"Sets additional status details for the current test case or step."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.statusDetails({ message: 'Test failed due to...', trace: 'Error stack trace' });\n"})}),"\n",(0,n.jsx)(t.h2,{id:"attachments",children:"Attachments"}),"\n",(0,n.jsx)(t.h3,{id:"allureattachmentstring-content-type",children:(0,n.jsx)(t.code,{children:"allure.attachment(string, content[, type])"})}),"\n",(0,n.jsx)(t.p,{children:"Adds an attachment to the current test case or step."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.attachment('Screenshot', Buffer.from('...'), 'image/png');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allurecreateattachmentname-string-content---string--buffer-type-string",children:(0,n.jsx)(t.code,{children:"allure.createAttachment(name: string, content: () => string | Buffer, type?: string)"})}),"\n",(0,n.jsx)(t.p,{children:"Creates a reusable attachment function."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"const takeScreenshot = allure.createAttachment('Screenshot', () => Buffer.from('...'), 'image/png');\ntakeScreenshot();\n"})}),"\n",(0,n.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,n.jsx)(t.h3,{id:"allurestepname-fn",children:(0,n.jsx)(t.code,{children:"allure.step(name, fn)"})}),"\n",(0,n.jsx)(t.p,{children:"Adds a step to the current test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.step('Enter username', () => {\n  // Step implementation\n});\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allurecreatestepname-fn",children:(0,n.jsx)(t.code,{children:"allure.createStep(name, fn)"})}),"\n",(0,n.jsx)(t.p,{children:"Creates a reusable step function."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"const login = allure.createStep('Login', (username, password) => {\n  // Login implementation\n});\nlogin('testuser', 'password123');\n"})}),"\n",(0,n.jsx)(t.h2,{id:"advanced-methods",children:"Advanced Methods"}),"\n",(0,n.jsx)(t.h3,{id:"allurebindoptions",children:(0,n.jsx)(t.code,{children:"allure.$bind(options)"})}),"\n",(0,n.jsx)(t.p,{children:"Binds an instance of the Allure Runtime API to a specific time and context in your test code."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"const boundAllure = allure.$bind({ metadata: true, time: false });\n"})}),"\n",(0,n.jsx)(t.p,{children:"Use it when you need to report some metadata post-factum, e.g. add some information about\nthe test after leaving its body, e.g.:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"let allure$;\n\ntest('...', () => {\n  allure$ = allure.$bind();\n  // ...\n});\n\nafterEach(() => {\n  allure$.parameter('Free Memory', os.freemem());\n});\n"})}),"\n",(0,n.jsx)(t.h3,{id:"allureplugcallback",children:(0,n.jsx)(t.code,{children:"allure.$plug(callback)"})}),"\n",(0,n.jsx)(t.p,{children:"Registers a runtime plugin to extend Allure functionality."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"allure.$plug((context) => {\n  // Plugin implementation\n});\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Read more about ",(0,n.jsx)(t.a,{href:"/jest-allure2-reporter/api/plugin-api",children:"plugins"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>i,a:()=>s});var n=a(7294);const l={},r=n.createContext(l);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);