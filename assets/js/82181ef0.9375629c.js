"use strict";(self.webpackChunk_wix_website_jest_allure2_reporter=self.webpackChunk_wix_website_jest_allure2_reporter||[]).push([[8521],{5821:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var r=n(5893),s=n(1151);const a={sidebar_position:4},i="Decorators",l={id:"api/decorators",title:"Decorators",description:"Decorators in jest-allure2-reporter provide a powerful way to add metadata and behavior to your test methods, particularly when working with class-based test structures. They offer a clean, declarative syntax for enhancing your tests with Allure-specific features.",source:"@site/../docs/api/03-decorators.mdx",sourceDirName:"api",slug:"/api/decorators",permalink:"/jest-allure2-reporter/api/decorators",draft:!1,unlisted:!1,editUrl:"https://github.com/wix-incubator/jest-allure2-reporter/tree/beta/docs/../docs/api/03-decorators.mdx",tags:[],version:"current",lastUpdatedBy:"Yaroslav Serhieiev",lastUpdatedAt:1725015775e3,sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"apiSidebar",previous:{title:"Annotations",permalink:"/jest-allure2-reporter/api/annotations"},next:{title:"Runtime API",permalink:"/jest-allure2-reporter/api/runtime-api"}},c={},o=[{value:"<code>Attachment</code>",id:"attachment",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:3},{value:"<code>FileAttachment</code>",id:"fileattachment",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Examples",id:"examples-1",level:3},{value:"<code>@Step</code>",id:"step",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Usage",id:"usage-2",level:3},{value:"Examples",id:"examples-2",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{ArticleHeader:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ArticleHeader",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"decorators",children:"Decorators"})}),"\n",(0,r.jsxs)(t.p,{children:["Decorators in ",(0,r.jsx)(t.code,{children:"jest-allure2-reporter"})," provide a powerful way to add metadata and behavior to your test methods, particularly when working with class-based test structures. They offer a clean, declarative syntax for enhancing your tests with Allure-specific features."]}),"\n",(0,r.jsx)(t.p,{children:"To use decorators, you'll need to import them first, e.g.:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { Step, Attachment, FileAttachment } from 'jest-allure2-reporter/api';\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Alternatively, you can ",(0,r.jsxs)(t.a,{href:"/jest-allure2-reporter/api#global-typings",children:["configure ",(0,r.jsx)(t.code,{children:"jest-allure2-reporter/globals"})]})," to make them available globally."]}),"\n",(0,r.jsx)(t.h2,{id:"attachment",children:(0,r.jsx)(t.code,{children:"Attachment"})}),"\n",(0,r.jsx)(n,{}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Attachment"})," decorator is used to add content attachments to test cases or steps in your Allure report."]}),"\n",(0,r.jsx)(t.h3,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"@Attachment(options: ContentAttachmentOptions)\n@Attachment(name: string, mimeType?: string)\n"})}),"\n",(0,r.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"options"}),": An object of type ",(0,r.jsx)(t.code,{children:"ContentAttachmentOptions"})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"}),": (Required) A string representing the name of the attachment"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"mimeType"}),": (Optional) A string specifying the MIME type of the attachment"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"handler"}),": (Optional) A custom ",(0,r.jsx)(t.a,{href:"/jest-allure2-reporter/api/plugin-api#custom-attachment-handler",children:"attachment handler function"})," or its string alias"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"name"}),": A string representing the name of the attachment"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"mimeType"}),": (Optional) A string specifying the MIME type of the attachment"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["You can use the ",(0,r.jsx)(t.code,{children:"Attachment"})," decorator in two ways:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"With an options object:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class TestClass {\n  @Attachment({\n    name: 'Attachment {{0}}',\n    mimeType: 'text/plain',\n    handler: 'gzip'\n  })\n  createAttachment(id: string): string {\n    return `Content for attachment ${id}`;\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"With name and optional MIME type:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class TestClass {\n  @Attachment('Attachment {{0}}', 'text/plain')\n  createAttachment(id: string): string {\n    return `Content for attachment ${id}`;\n  }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"The decorated method should return the content to be attached. The content can be a string or a Buffer."}),"\n",(0,r.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class HtmlGenerator {\n  @Attachment('Say: {{0}}', 'text/html')\n  static say(message: string) {\n    return `<h1>${message}</h1>`;\n  }\n}\n\ntest('should attach HTML via a decorator', () => {\n  expect(HtmlGenerator.say('Hello, world!')).toBe('<h1>Hello, world!</h1>');\n});\n"})}),"\n",(0,r.jsxs)(t.p,{children:['This will create an HTML attachment named "Say: Hello, world!" with the content ',(0,r.jsx)(t.code,{children:"<h1>Hello, world!</h1>"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"fileattachment",children:(0,r.jsx)(t.code,{children:"FileAttachment"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"FileAttachment"})," decorator is used to add file attachments to test cases or steps in your Allure report."]}),"\n",(0,r.jsx)(t.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"@FileAttachment(options?: FileAttachmentOptions)\n@FileAttachment(name?: string, mimeType?: string)\n"})}),"\n",(0,r.jsx)(t.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"options"}),": An object of type ",(0,r.jsx)(t.code,{children:"FileAttachmentOptions"})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"}),": (Optional) A string representing the name of the attachment"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"mimeType"}),": (Optional) A string specifying the MIME type of the attachment"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"handler"}),": (Optional) A custom ",(0,r.jsx)(t.a,{href:"/jest-allure2-reporter/api/plugin-api#custom-attachment-handler",children:"attachment handler function"})," or its string alias"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"name"}),": (Optional) A string representing the name of the attachment"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"mimeType"}),": (Optional) A string specifying the MIME type of the attachment"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"usage-1",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["You can use the ",(0,r.jsx)(t.code,{children:"FileAttachment"})," decorator in two ways:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"With an options object:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class TestClass {\n  @FileAttachment({\n    name: 'File {{0}}',\n    mimeType: 'text/plain',\n    handler: 'copy'\n  })\n  attachFile(fileName: string): string {\n    return `/path/to/${fileName}`;\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"With optional name and MIME type:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class TestClass {\n  @FileAttachment('File {{0}}', 'text/plain')\n  attachFile(fileName: string): string {\n    return `/path/to/${fileName}`;\n  }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"The decorated method should return the path to the file that should be attached."}),"\n",(0,r.jsx)(t.h3,{id:"examples-1",children:"Examples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="source-code-attacher.test.ts"',children:"import path from 'node:path';\n\nclass SourceCodeAttacher {\n  @FileAttachment('{{0}}', 'text/plain')\n  static thisFile() {\n    return __filename;\n  }\n}\n\ntest('should attach the file itself via a decorator', () => {\n  expect(SourceCodeAttacher.thisFile()).toBe(__filename);\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"This will create a file attachment with the name of the file and the content of the file at the specified path."}),"\n",(0,r.jsxs)(t.p,{children:["Both ",(0,r.jsx)(t.code,{children:"Attachment"})," and ",(0,r.jsx)(t.code,{children:"FileAttachment"})," decorators support using handlebars notation (",(0,r.jsx)(t.code,{children:"{{0}}"}),", ",(0,r.jsx)(t.code,{children:"{{1}}"}),", etc.) in the attachment name to include method parameters."]}),"\n",(0,r.jsx)(t.h2,{id:"step",children:(0,r.jsx)(t.code,{children:"@Step"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"@Step"})," decorator marks a method as a test step, which will be reported in the Allure report. It allows you to create a hierarchical structure of steps within your tests, making them more readable and easier to debug."]}),"\n",(0,r.jsx)(t.h3,{id:"syntax-2",children:"Syntax"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"@Step(name: string, args?: UserParameter[])\n"})}),"\n",(0,r.jsx)(t.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name: string"})," - A description template for the step. It can include placeholders for method parameters using handlebars notation (e.g., ",(0,r.jsx)(t.code,{children:"{{0}}"}),", ",(0,r.jsx)(t.code,{children:"{{1}}"}),", etc.)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"args?: UserParameter[]"})," (optional) - An array of parameter definitions to be included in the step report."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"UserParameter"})," can be one of the following:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"A string representing the parameter name"}),"\n",(0,r.jsxs)(t.li,{children:["An object which can include:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name: string"})," - The name of the parameter"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"excluded?: boolean"})," - If true, the parameter will be excluded from ",(0,r.jsx)(t.code,{children:"allure-results"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"mode?: 'hidden' | 'masked' | 'default'"})," - Determines how the parameter is displayed in the generated report"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"usage-2",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["Apply the ",(0,r.jsx)(t.code,{children:"@Step"})," decorator to methods in your test classes:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class TestClass {\n  @Step('Perform action with {{0}} and {{1}}')\n  performAction(param1: string, param2: number): void {\n    // Method implementation\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"examples-2",children:"Examples"}),"\n",(0,r.jsx)(t.p,{children:"Basic usage:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class Calculator {\n  @Step('Add {{a}} and {{b}}', ['a', 'b'])\n  add(a: number, b: number): number {\n    return a + b;\n  }\n}\n\ntest('addition', () => {\n  const calculator = new Calculator();\n  expect(calculator.add(2, 3)).toBe(5);\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"Using parameter definitions:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class UserService {\n  @Step('Login as {{username}}', [\n    'username',\n    { name: 'password', mode: 'masked' }\n  ])\n  login(username: string, password: string): boolean {\n    // Login implementation\n    return true;\n  }\n}\n\ntest('user login', () => {\n  const userService = new UserService();\n  expect(userService.login('john.doe', 'secret123')).toBe(true);\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"In this example, the password will be masked in the Allure report."}),"\n",(0,r.jsx)(t.p,{children:"Nested steps:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class ComplexOperation {\n  @Step('Perform complex operation')\n  performOperation(): number {\n    const result1 = this.step1();\n    const result2 = this.step2();\n    return result1 + result2;\n  }\n\n  @Step('Step 1')\n  private step1(): number {\n    return 5;\n  }\n\n  @Step('Step 2')\n  private step2(): number {\n    return 7;\n  }\n}\n\ntest('complex operation', () => {\n  const operation = new ComplexOperation();\n  expect(operation.performOperation()).toBe(12);\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"This will create a hierarchical structure of steps in the Allure report, showing the main operation and its substeps."})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>i});var r=n(7294);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);