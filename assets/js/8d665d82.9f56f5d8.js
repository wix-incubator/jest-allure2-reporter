"use strict";(self.webpackChunk_wix_website_jest_allure2_reporter=self.webpackChunk_wix_website_jest_allure2_reporter||[]).push([[3637],{4296:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=s(5893),i=s(1151);const a={},r="Test Case",l={id:"api/config/test-case",title:"Test Case",description:"In jest-allure2-reporter, the testCase configuration object allows you to customize how individual test cases are reported in Allure.",source:"@site/../docs/api/config/03-test-case.mdx",sourceDirName:"api/config",slug:"/api/config/test-case",permalink:"/jest-allure2-reporter/api/config/test-case",draft:!1,unlisted:!1,editUrl:"https://github.com/wix-incubator/jest-allure2-reporter/tree/beta/docs/../docs/api/config/03-test-case.mdx",tags:[],version:"current",lastUpdatedBy:"Yaroslav Serhieiev",lastUpdatedAt:1725271315e3,sidebarPosition:3,frontMatter:{},sidebar:"apiSidebar",previous:{title:"Customizers",permalink:"/jest-allure2-reporter/api/config/customizers"},next:{title:"Test Step",permalink:"/jest-allure2-reporter/api/config/test-step"}},o={},c=[{value:"Configuration Options",id:"configuration-options",level:2},{value:"<code>uuid</code>",id:"uuid",level:3},{value:"<code>ignored</code>",id:"ignored",level:3},{value:"<code>historyId</code>",id:"historyid",level:3},{value:"<code>displayName</code>",id:"displayname",level:3},{value:"<code>fullName</code>",id:"fullname",level:3},{value:"<code>start</code>",id:"start",level:3},{value:"<code>stop</code>",id:"stop",level:3},{value:"<code>description</code>",id:"description",level:3},{value:"<code>descriptionHtml</code>",id:"descriptionhtml",level:3},{value:"<code>stage</code>",id:"stage",level:3},{value:"<code>status</code>",id:"status",level:3},{value:"<code>statusDetails</code>",id:"statusdetails",level:3},{value:"<code>labels</code>",id:"labels",level:3},{value:"<code>links</code>",id:"links",level:3},{value:"<code>attachments</code>",id:"attachments",level:3},{value:"<code>parameters</code>",id:"parameters",level:3},{value:"Usage Example",id:"usage-example",level:2}];function d(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{ArticleHeader:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ArticleHeader",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"test-case",children:"Test Case"})}),"\n",(0,n.jsxs)(t.p,{children:["In ",(0,n.jsx)(t.code,{children:"jest-allure2-reporter"}),", the ",(0,n.jsx)(t.code,{children:"testCase"})," configuration object allows you to customize how individual test cases are reported in Allure.\nThis configuration provides fine-grained control over various aspects of test case reporting, including naming, status, labels, links, and more."]}),"\n",(0,n.jsx)(t.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,n.jsx)(s,{}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"testCase"})," configuration object supports the following properties:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"/** @type {import('jest-allure2-reporter').ReporterOptions} */\nconst jestAllure2ReporterOptions = {\n  testCase: {\n    uuid: /* ... */,\n    ignored: /* ... */,\n    historyId: /* ... */,\n    displayName: /* ... */,\n    fullName: /* ... */,\n    start: /* ... */,\n    stop: /* ... */,\n    description: /* ... */,\n    descriptionHtml: /* ... */,\n    stage: /* ... */,\n    status: /* ... */,\n    statusDetails: /* ... */,\n    labels: {\n      epic: /* ... */,\n      feature: /* ... */,\n      owner: /* ... */,\n      package: /* ... */,\n      parentSuite: /* ... */,\n      severity: /* ... */,\n      story: /* ... */,\n      subSuite: /* ... */,\n      suite: /* ... */,\n      tag: /* ... */,\n      testClass: /* ... */,\n      testMethod: /* ... */,\n      thread: /* ... */,\n      custom: /* ... */,\n    },\n    links: {\n      issue: /* ... */,\n      tms: /* ... */,\n      custom: /* ... */,\n    }\n    attachments: [\n      {\n         name: /* ... */,\n         type: /* ... */,\n         source: /* ... */,\n      },\n    ],\n    parameters: [\n      {\n        name: /* ... */,\n        value: /* ... */,\n        mode: /* ... */,\n      },\n    ],\n  }\n};\n"})}),"\n",(0,n.jsx)(t.h3,{id:"uuid",children:(0,n.jsx)(t.code,{children:"uuid"})}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsxs)(t.p,{children:["Overriding the UUID may cause issues with the Allure report, as it is used to uniquely identify test cases in the report.\nMake sure you produce unique values across all test cases ",(0,n.jsx)(t.em,{children:"including their retry attempts"}),"."]})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, string>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically generated (UUID v4)"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Customizes the unique identifier for each test case run.\nThis is needed only in ",(0,n.jsx)(t.em,{children:"very rare cases"})," where you need predictable JSON paths in ",(0,n.jsx)(t.code,{children:"allure-results"})," directory."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"/** @type {import('jest-allure2-reporter').ReporterOptions} */\nconst config = {\n  testCase: {\n    uuid: async ({ $, filePath, testCase }) => `${await package.name}:${filePath}:${testCase.fullName}`\n  }\n};\n"})}),"\n",(0,n.jsx)(t.p,{children:"You can return any string from this function because the conversion to UUID v5 is done internally\nby the reporter at the very end."}),"\n",(0,n.jsx)(t.h3,{id:"ignored",children:(0,n.jsx)(t.code,{children:"ignored"})}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"Ignoring test cases may lead to incomplete test reports, so use this option with caution."})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, boolean>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"false"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Determines whether a test case should be omitted from the report."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"ignored: ({ testCase }) => testCase.fullName.includes('WIP')\n"})}),"\n",(0,n.jsx)(t.h3,{id:"historyid",children:(0,n.jsx)(t.code,{children:"historyId"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, Primitive>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Based on full test name"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the history ID for a test case, which is used for Allure's history feature."}),"\n",(0,n.jsx)(t.p,{children:"For example, when you have non-unique test suites and the only difference is the file path, you can use the file path as the history ID:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"historyId: ({ filePath, testCase }) => `${filePath}:${testCase.fullName}`\n"})}),"\n",(0,n.jsxs)(t.p,{children:["So, if previously you had ",(0,n.jsx)(t.code,{children:"file1.test.ts"})," and ",(0,n.jsx)(t.code,{children:"file2.test.ts"})," with the same test name,\nthey no longer would be reported as retries of the same test case \u2014 with a customization\nlike this, they would be treated as separate test cases."]}),"\n",(0,n.jsx)(t.h3,{id:"displayname",children:(0,n.jsx)(t.code,{children:"displayName"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, string>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"({ testCase }) => testCase.title"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the display name of the test case in the report."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"displayName: ({ testCase, filePath }) => `[${filePath.join('/')}] ${testCase.title}`\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example prefixes the test title with the file path, providing more context in the report."}),"\n",(0,n.jsx)(t.h3,{id:"fullname",children:(0,n.jsx)(t.code,{children:"fullName"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, string>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"({ testCase }) => testCase.fullName"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Sets the full name of the test case, which can be used for more detailed identification."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"fullName: ({ filePath, testCase }) => `${filePath.join('/')}::${testCase.fullName}`\n"})}),"\n",(0,n.jsx)(t.p,{children:"This combines the file path with the full test name, ensuring uniqueness across different files."}),"\n",(0,n.jsx)(t.h3,{id:"start",children:(0,n.jsx)(t.code,{children:"start"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, number>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the start timestamp of the test case. This is rarely needed, but can be useful for adjusting timestamps in specific scenarios."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"start: ({ value }) => value - 1000 // Subtract 1 second from the actual start time\n"})}),"\n",(0,n.jsx)(t.h3,{id:"stop",children:(0,n.jsx)(t.code,{children:"stop"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, number>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Customizes the stop timestamp of the test case. Like ",(0,n.jsx)(t.code,{children:"start"}),", this is rarely needed but can be useful in specific cases."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"stop: ({ value }) => value + 1000 // Add 1 second to the actual stop time\n"})}),"\n",(0,n.jsx)(t.h3,{id:"description",children:(0,n.jsx)(t.code,{children:"description"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, string>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically generated based on test code"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Sets a custom description for the test case in Markdown format."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"description: ({ testCaseMetadata }) => `\n## Test Case: ${testCaseMetadata.displayName}\n\n${testCaseMetadata.description || ''}\n\n\\`\\`\\`js\n${testCaseMetadata.transformedCode}\n\\`\\`\\`\n`\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example combines the display name, any existing description, and the test code into a formatted Markdown description."}),"\n",(0,n.jsx)(t.h3,{id:"descriptionhtml",children:(0,n.jsx)(t.code,{children:"descriptionHtml"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, string>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"undefined"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Sets a custom description for the test case in HTML format."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"descriptionHtml: ({ testCaseMetadata }) => `\n<h2>Test Case: ${testCaseMetadata.displayName}</h2>\n${testCaseMetadata.description ? `<p>${testCaseMetadata.description}</p>` : ''}\n<pre><code class=\"language-javascript\">\n${testCaseMetadata.transformedCode}\n</code></pre>\n`\n"})}),"\n",(0,n.jsx)(t.p,{children:"This creates an HTML description with the display name, optional description, and formatted test code."}),"\n",(0,n.jsx)(t.h3,{id:"stage",children:(0,n.jsx)(t.code,{children:"stage"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, Stage>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set based on test execution"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the stage of the test case. Possible values are 'scheduled', 'running', 'finished', 'pending', or 'interrupted'."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"stage: ({ value }) => value === 'running' ? 'pending' : value\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example changes 'running' stages to 'pending', which might be useful in specific reporting scenarios."}),"\n",(0,n.jsx)(t.h3,{id:"status",children:(0,n.jsx)(t.code,{children:"status"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, Status>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set based on test result"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the status of the test case. Possible values are 'failed', 'broken', 'passed', 'skipped', or 'unknown'."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"status: ({ value, testCase }) => {\n  if (value === 'failed' && testCase.failureMessages.some(msg => msg.includes('timeout'))) {\n    return 'broken';\n  }\n  return value;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"This example changes 'failed' status to 'broken' if the failure message includes 'timeout'."}),"\n",(0,n.jsx)(t.h3,{id:"statusdetails",children:(0,n.jsx)(t.code,{children:"statusDetails"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"PropertyCustomizer<TestCaseExtractorContext, MaybeNullish<StatusDetails>>"})]}),"\n",(0,n.jsx)(t.li,{children:"Default: Automatically set based on test result"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Provides additional details about the test case status."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"statusDetails: ({ value }) => value ? { ...value, trace: 'Custom trace information' } : value\n"})}),"\n",(0,n.jsx)(t.h3,{id:"labels",children:(0,n.jsx)(t.code,{children:"labels"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"LabelsCustomizer<TestCaseExtractorContext>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"undefined"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the labels associated with the test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"labels: {\n  severity: 'critical',\n  story: ({ testCase }) => `User Story: ${testCase.ancestorTitles[0]}`,\n  custom: ({ filePath }) => filePath.join('/'),\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"links",children:(0,n.jsx)(t.code,{children:"links"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"LinksCustomizer<TestCaseExtractorContext>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"undefined"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the links associated with the test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"links: {\n  issue: ({ value }) => ({\n    name: value.name ?? `Issue ${value.url}`,\n    url: `https://jira.company.com/${value.url}`,\n  }),\n  tms: 'https://tms.company.com/test/{{name}}'\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"attachments",children:(0,n.jsx)(t.code,{children:"attachments"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"AttachmentsCustomizer<TestCaseExtractorContext>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"undefined"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the attachments for the test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"attachments: ({ value }) => [\n  ...value,\n  {\n    name: 'Additional Info',\n    content: 'Extra information about the test case',\n    type: 'text/plain'\n  }\n]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"parameters",children:(0,n.jsx)(t.code,{children:"parameters"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Type: ",(0,n.jsx)(t.code,{children:"ParametersCustomizer<TestCaseExtractorContext>"})]}),"\n",(0,n.jsxs)(t.li,{children:["Default: ",(0,n.jsx)(t.code,{children:"undefined"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Customizes the parameters for the test case."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"parameters: {\n  browser: 'Chrome',\n  version: ({ package }) => package.version,\n  custom: ({ testCase }) => ({\n    name: 'Test Depth',\n    value: testCase.ancestorTitles.length,\n  })\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,n.jsx)(t.p,{children:"Here's a comprehensive example of how to use the test case configuration:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import type { ReporterOptions } from 'jest-allure2-reporter';\n\nconst testCaseConfig: ReporterOptions['testCase'] = {\n  uuid: ({ result ) => result.historyId,\n  historyId: ({ package, filePath, testCase }) => `${package.name}:${filePath}:${testCase.fullName}`,\n  displayName: ({ testCase }) => `[${testCase.ancestorTitles.join(' > ')}] ${testCase.title}`,\n  fullName: ({ filePath, testCase }) => `${filePath.join('/')}::${testCase.fullName}`,\n  description: ({ result }) => `\n    ## Test Case: ${result.displayName}\n    ${testCaseMetadata.description}\n    \\`\\`\\`js\n    ${testCaseMetadata.transformedCode}\n    \\`\\`\\`\n  `,\n  status: ({ value }) => value === 'broken' ? 'failed' : value,\n  labels: {\n    severity: 'critical',\n    story: ({ testCase }) => testCase.ancestorTitles[0],\n    custom: ({ filePath }) => filePath.join('/'),\n  },\n  links: {\n    issue: ({ value }) => ({\n      name: value.name ?? `Issue ${value.url}`,\n      url: `https://jira.company.com/${value.url}`,\n    }),\n    tms: 'https://tms.company.com/test/{{name}}'\n  },\n  parameters: {\n    browser: 'Chrome',\n    'Test Depth': ({ testCase }) => ({\n      value: testCase.ancestorTitles.length,\n    })\n  }\n};\n\nmodule.exports = {\n  // ... other Jest configurations\n  reporters: [\n    'default',\n    ['jest-allure2-reporter', { testCase: testCaseConfig }]\n  ],\n};\n"})}),"\n",(0,n.jsx)(t.p,{children:"This configuration provides a rich set of customizations for test case reporting, allowing you to tailor the Allure report to your specific needs. The next article will dive into similar configurations for individual test steps, providing even more granular control over your test reporting."})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>l,a:()=>r});var n=s(7294);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);