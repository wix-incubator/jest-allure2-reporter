"use strict";(self.webpackChunk_wix_website_jest_allure2_reporter=self.webpackChunk_wix_website_jest_allure2_reporter||[]).push([[788],{876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3142:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(2784),a=n(6277);const o={tabItem:"tabItem_OMyP"};function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:n},t)}},2605:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7896),a=n(2784),o=n(6277),i=n(5425),s=n(7267),l=n(4236),c=n(3432),u=n(9675);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,c]=h({queryString:n,groupId:r}),[p,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),f=(()=>{const e=l??p;return m({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),b(e)}),[c,b,o]),tabValues:o}}var f=n(717);const k={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};function v(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==s&&(p(t),l(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},i,{className:(0,o.Z)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function g(e){const t=b(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},a.createElement(v,(0,r.Z)({},e,t)),a.createElement(y,(0,r.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return a.createElement(g,(0,r.Z)({key:String(t)},e))}},329:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=n(7896),a=(n(2784),n(876)),o=n(2605),i=n(3142);const s={sidebar_position:1,description:"Make your tests more understandable with rich descriptions"},l="Description",c={unversionedId:"annotations/description",id:"annotations/description",title:"Description",description:"Make your tests more understandable with rich descriptions",source:"@site/../../docs/annotations/description.mdx",sourceDirName:"annotations",slug:"/annotations/description",permalink:"/jest-allure2-reporter/docs/annotations/description",draft:!1,editUrl:"https://github.com/wix-incubator/jest-allure2-reporter/tree/master/docs/../../docs/annotations/description.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Make your tests more understandable with rich descriptions"},sidebar:"docsSidebar",previous:{title:"Annotations",permalink:"/jest-allure2-reporter/docs/anotations"},next:{title:"Steps",permalink:"/jest-allure2-reporter/docs/annotations/steps"}},u={},p=[{value:"Test cases",id:"test-cases",level:2},{value:"Test hooks",id:"test-hooks",level:2},{value:"Test suites",id:"test-suites",level:2},{value:"Configuration",id:"configuration",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"description"},"Description"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This website version refers to the unreleased version of ",(0,a.kt)("inlineCode",{parentName:"p"},"jest-allure2-reporter")," and is not yet available\nanywhere. Please use GitHub docs for the latest stable version.")),(0,a.kt)("p",null,"A well-written description can enhance the usefulness of a test by providing clear context and expected outcomes. It can also assist in deciphering test failures."),(0,a.kt)("p",null,"There are two ways to define a description for an executable block:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"declaratively, via ",(0,a.kt)("inlineCode",{parentName:"li"},"@desc"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"@description"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"@descriptionHtml")," JSDoc annotations (or even without them);"),(0,a.kt)("li",{parentName:"ul"},"programmatically, via ",(0,a.kt)("inlineCode",{parentName:"li"},"$Description('')")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"$DescriptionHtml('')")," annotation functions.")),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"description")," can be defined for the built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"it"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"test"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeAll"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeEach"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"afterAll"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"afterEach")," blocks and ",(0,a.kt)("a",{parentName:"p",href:"/jest-allure2-reporter/docs/annotations/steps"},"custom steps"),"."),(0,a.kt)("p",null,"This article will focus on the built-in blocks."),(0,a.kt)("h2",{id:"test-cases"},"Test cases"),(0,a.kt)("p",null,"Allure Framework supports rich text descriptions for tests. But don't worry if you don't provide a description. The reporter will still present the test neatly by displaying the source code of the test."),(0,a.kt)(o.Z,{groupId:"approach",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"jsdoc",label:"JSDoc",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"it('should add two numbers', () => {\n  /**\n    * _Implicit_ annotation without `@desc` or `@description`.\n    */\n  const a = 1;\n  const b = 2;\n  const sum = a + b;\n  expect(sum).toBe(3);\n});\n\nit('should subtract two numbers', () => {\n  /**\n    * @descriptionHtml\n    * <i>Explicit</i> annotation with <code>@descriptionHtml</code>.\n    */\n  const a = 1;\n  const b = 2;\n  const diff = b - a;\n  expect(diff).toBe(1);\n});\n"))),(0,a.kt)(i.Z,{value:"dsl",label:"Function",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"$Description('_Implicit_ annotation without `@desc` or `@description`.')\nit('should add two numbers', () => {\n  /**\n    *\n    */\n  const a = 1;\n  const b = 2;\n  const sum = a + b;\n  expect(sum).toBe(3);\n});\n\n$DescriptionHtml('<i>Explicit</i> annotation with <code>@descriptionHtml</code>.')\nit('should subtract two numbers', () => {\n  /**\n    * @descriptionHtml\n    * <i>Explicit</i> annotation with <code>@descriptionHtml</code>.\n    */\n  const a = 1;\n  const b = 2;\n  const diff = b - a;\n  expect(diff).toBe(1);\n});\n"))),(0,a.kt)(i.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"TODO: add screenshot\n")))),(0,a.kt)("h2",{id:"test-hooks"},"Test hooks"),(0,a.kt)("p",null,"Test hooks such as ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeAll"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeEach"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"afterAll"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"afterEach")," can also have descriptions since technically they are considered ",(0,a.kt)("a",{parentName:"p",href:"/jest-allure2-reporter/docs/annotations/steps"},"steps")," in the Allure report."),(0,a.kt)("p",null,"However, they are limited to plain text descriptions only due to Allure Framework limitations."),(0,a.kt)(o.Z,{groupId:"approach",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"jsdoc",label:"JSDoc",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"beforeAll(() => {\n  /** This hook runs before all tests. */\n});\n\nbeforeEach(() => {\n  /** @desc This hook runs before each test. */\n});\n\nafterEach(() => {\n  /**\n    * @description\n    * This hook runs after each test.\n    */\n});\n"))),(0,a.kt)(i.Z,{value:"dsl",label:"Function",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"@Description('This hook runs before all tests.')\nbeforeAll(() => {\n  // ...\n});\n\n@Description('This hook runs before each test.')\nbeforeEach(() => {\n  // ...\n});\n\n@Description('This hook runs after each test.')\nafterEach(() => {\n  // ...\n});\n"))),(0,a.kt)(i.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"TODO: add screenshot\n")))),(0,a.kt)("h2",{id:"test-suites"},"Test suites"),(0,a.kt)("p",null,"Unfortunately, it is not possible to define a description for the entire test suite or an individual test suite (",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," block) due to Allure Framework limitations."),(0,a.kt)("p",null,"However, if you add a description on top of the test suite, it will be prepended to every test description within the suite, e.g.:"),(0,a.kt)(o.Z,{groupId:"approach",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"jsdoc",label:"JSDoc",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"describe('Sanity: Login flow', () => {\n  /** This description will be prepended to every test description. */\n\n  it('should login with valid credentials', () => {\n    /** This test logs in with valid credentials. */\n  });\n\n  it('should login with invalid credentials', () => {\n    /** This test logs in with invalid credentials. */\n  });\n});\n"))),(0,a.kt)(i.Z,{value:"dsl",label:"Function",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"$Description('This description will be prepended to every test description.')\ndescribe('Sanity: Login flow', () => {\n  $Description('This test logs in with valid credentials.')\n  it('should login with valid credentials', () => {\n  });\n\n  $Description('This test logs in with invalid credentials.')\n  it('should login with invalid credentials', () => {\n  });\n});\n"))),(0,a.kt)(i.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"TODO: add screenshot\n")))),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("admonition",{title:"Work in progress",type:"caution"}),(0,a.kt)("p",null,"You can configure whether the source code of the test is included or not, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"includeSourceCode")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"omitJSDoc")," options. By default, both are set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("p",null,"As a result, the following test will be reported without JSDoc annotations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"it('should add two numbers', () => {\n  /**\n    * This test adds two numbers.\n    */\n  const a = 1;\n  const b = 2;\n  const sum = a + b;\n  expect(sum).toBe(3);\n});\n")),(0,a.kt)("p",null,"TODO: See the configuration section for more details."))}h.isMDXComponent=!0}}]);