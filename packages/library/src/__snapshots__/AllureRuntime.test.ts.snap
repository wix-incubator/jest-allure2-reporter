// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AllureRuntime should add attachments within the steps 1`] = `
{
  "$pointer": [],
  "attachments": [
    {
      "content": {
        "data": [
          102,
          105,
          114,
          115,
          116,
        ],
        "type": "Buffer",
      },
      "name": "attachment1",
      "type": "text/plain",
    },
    {
      "content": {
        "data": [
          102,
          105,
          102,
          116,
          104,
        ],
        "type": "Buffer",
      },
      "name": "attachment5",
      "type": "text/plain",
    },
  ],
  "steps": [
    {
      "attachments": [
        {
          "content": "third",
          "name": "attachment3",
          "type": "text/plain",
        },
      ],
      "code": "async () => {
            try {
                runtime.step('inner step 1', () => {
                    runtime.attachment('attachment2', 'second', 'text/plain');
                    const error = new Error('Sync error');
                    error.stack = 'Test stack';
                    throw error;
                });
            }
            catch {
                /* empty */
            }
            runtime.step('inner step 2', () => {
                /* empty */
            });
            runtime.attachment('attachment3', 'third', 'text/plain');
            await runtime
                .step('inner step 3', async () => {
                runtime.attachment('attachment4', 'fourth', 'text/plain');
                const error = new Error('Async error');
                error.stack = 'Test stack';
                throw error;
            })
                .catch(() => {
                /* empty */
            });
        }",
      "name": "outer step",
      "stage": "finished",
      "start": 0,
      "status": "passed",
      "statusDetails": undefined,
      "steps": [
        {
          "attachments": [
            {
              "content": "second",
              "name": "attachment2",
              "type": "text/plain",
            },
          ],
          "code": "() => {
                    runtime.attachment('attachment2', 'second', 'text/plain');
                    const error = new Error('Sync error');
                    error.stack = 'Test stack';
                    throw error;
                }",
          "name": "inner step 1",
          "stage": "finished",
          "start": 1,
          "status": "failed",
          "statusDetails": {
            "message": "Sync error",
            "trace": "Test stack",
          },
          "stop": 2,
        },
        {
          "code": "() => {
                /* empty */
            }",
          "name": "inner step 2",
          "stage": "finished",
          "start": 3,
          "status": "passed",
          "statusDetails": undefined,
          "stop": 4,
        },
        {
          "attachments": [
            {
              "content": "fourth",
              "name": "attachment4",
              "type": "text/plain",
            },
          ],
          "code": "async () => {
                runtime.attachment('attachment4', 'fourth', 'text/plain');
                const error = new Error('Async error');
                error.stack = 'Test stack';
                throw error;
            }",
          "name": "inner step 3",
          "stage": "finished",
          "start": 5,
          "status": "failed",
          "statusDetails": {
            "message": "Async error",
            "trace": "Test stack",
          },
          "stop": 6,
        },
      ],
      "stop": 7,
    },
  ],
}
`;
