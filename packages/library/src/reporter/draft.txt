      for (const testCaseResult of testResult.testResults) {
        const testEntry = query.testCaseResult(testCaseResult);

        for (const testInvocationMeta of testEntry.invocations) {
          const userTestMetadata = {
            ...(testEntry.get(ns()) as AllureTestCaseMetadata),
            ...(testInvocationMeta.get(ns()) as AllureTestCaseMetadata),
          } as AllureTestStepMetadata;

          const group = allure.startGroup(testCaseResult.fullName);

          const aTest = group.startTest(
            testCaseResult.title,
            userTestMetadata.start!,
          );
          aTest.fullName = testCaseResult.fullName;

          const allInvocations = [
            [() => group.addBefore(), testInvocationMeta.beforeAll],
            [() => group.addBefore(), testInvocationMeta.before],
            [
              () => aTest.startStep('test'),
              testInvocationMeta.fn ? [testInvocationMeta.fn] : [],
            ],
            [() => group.addAfter(), testInvocationMeta.after],
            [() => group.addAfter(), testInvocationMeta.afterAll],
          ] as const;

          for (const [createGroup, invocations] of allInvocations) {
            for (const invocation of invocations) {
              const definition = invocation.definition.get(
                ns(),
              )! as AllureTestStepMetadata;
              const executable = invocation.get(
                ns(),
              )! as AllureTestStepMetadata;
              const userMetadata: AllureTestStepMetadata = {
                ...userTestMetadata,
                ...definition,
                ...executable,
              };

              const step = createGroup();
              step.stage = userMetadata.stage ?? Stage.SCHEDULED;
              step.status = userMetadata.status ?? step.status;
              if (userMetadata.start != null) {
                step.wrappedItem.start = userMetadata.start;
              }
              if (userMetadata.stop != null) {
                step.wrappedItem.stop = userMetadata.stop;
              }
              if (userMetadata.statusDetails != null) {
                step.statusDetails = userMetadata.statusDetails;
              }
              if (userMetadata.name != null) {
                step.name = userMetadata.name;
              }
            }
          }

          let code = '';
          const attachCodeAs = (type: string, content: unknown) => {
            if (content) {
              code += `${type}(${content})\n`;
            }
          };
          for (const block of testInvocationMeta.beforeAll) {
            attachCodeAs('beforeAll', block.definition.get(ns('code')));
          }
          for (const block of testInvocationMeta.before) {
            attachCodeAs('beforeEach', block.definition.get(ns('code')));
          }
          attachCodeAs('test', testInvocationMeta.entry.get(ns('code')));
          for (const block of testInvocationMeta.after) {
            attachCodeAs('afterEach', block.definition.get(ns('code')));
          }
          for (const block of testInvocationMeta.afterAll) {
            attachCodeAs('afterAll', block.definition.get(ns('code')));
          }

          aTest.descriptionHtml =
            '<details><summary>Test code</summary><pre><code language="JavaScript">\n' +
            code +
            '\n</code></pre></details>';
          aTest.status =
            testCaseResult.status === 'failed' ? Status.FAILED : Status.PASSED;
          aTest.statusDetails = {
            message: testCaseResult.failureMessages.join('\n'),
          };
          aTest.addLabel(LabelName.SEVERITY, 'critical');
          aTest.addLabel(LabelName.TAG, 'e2e');
          aTest.addLabel(LabelName.TAG, 'detox');
          aTest.addLabel(LabelName.EPIC, 'Epic 1');
          aTest.addLabel(LabelName.EPIC, 'Epic 2');
          aTest.addLabel(LabelName.FEATURE, 'Feature 1');
          aTest.addLabel(LabelName.FEATURE, 'Feature 2');
          aTest.addLabel(LabelName.STORY, testCaseResult.fullName);
          aTest.addLabel(LabelName.OWNER, 'John Doe <john.doe@example.com>');
          aTest.addLabel(LabelName.PACKAGE, 'jest-metadata');
          aTest.addLabel(LabelName.TAG, 'flaky');
          aTest.addLabel(LabelName.SUITE, 'Suite');
          aTest.addLabel(LabelName.PARENT_SUITE, 'Parent suite');
          aTest.addLabel(LabelName.SUB_SUITE, 'Sub-suite');
          aTest.addLabel(
            LabelName.THREAD,
            testEntry.describeBlock.run.get(ns('workerId')) as string,
          );
          aTest.addLabel(
            LabelName.TEST_METHOD,
            test.path + ':' + testCaseResult.fullName,
          );
          aTest.addTmsLink('https://tms.example.com/E2E-10100', 'E2E-10100');
          aTest.addIssueLink(
            'https://jira-company.de/FEAT-10001',
            'FEAT-10001',
          );
          aTest.addLink('https://github.com/com/proj', 'FEAT-10001', 'github');
          aTest.endTest(userTestMetadata.stop!);
          group.endGroup();
        }
      }
